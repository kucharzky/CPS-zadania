          
function rozwiazanie(;
    z::Vector{ComplexF64} = ComplexF64[1.0 + 0.0im, 1.0 + 0.0im, 1.0 + 0.0im, 1.0 + 0.0im, 1.0 + 0.0im, 1.0 + 0.0im, -1.0 + 0.0im, -1.0 + 0.0im, -1.0 + 0.0im, -1.0 + 0.0im, -1.0 + 0.0im, -1.0 + 0.0im],
    p::Vector{ComplexF64} = ComplexF64[0.9038041169946005 - 0.32746423344522424im, 0.6154308351528095 + 0.6807678104230418im, 0.9038041169946005 + 0.32746423344522424im, 2.6824500537367126 - 2.967231320475016im, 0.8246181335588202 - 0.31695252208353875im, 0.5874398655514338 + 0.5339252320919871im, 0.8246181335588202 + 0.31695252208353875im, 0.5874398655514338 - 0.5339252320919871im, 0.7304093553908807 - 0.33265586138136494im, 0.6341551018773124 + 0.40531567281340564im, 0.7304093553908807 + 0.33265586138136494im, 0.6341551018773124 - 0.40531567281340564im],
    k::Float64 = 0.00010706889742140342,
)
    # -1.0
    for pole in p
        if abs(pole) > 1
            return -1
        elseif abs(pole) == 1
            return 0
        end
    end

    return 1

end

rozwiazanie()

##
          
function rozwiazanie(;
    b::Vector{Float64} = [0.49542756026484974, -5.1201162482628995, 25.002661497732436, -76.1128471950791, 160.64599630166308, -247.43991127805305, 285.05771667480013, -247.43991127805307, 160.64599630166313, -76.11284719507911, 25.00266149773244, -5.1201162482629, 0.49542756026484963],
    a::Vector{Float64} = [1.0, -9.456868269434338, 42.343129109694544, -118.51989927395893, 230.78850820365045, -329.27555515488757, 353.0070263488843, -286.6912306704869, 175.22879404349214, -78.72117507087847, 24.72133240259777, -4.884539868763225, 0.46065187052614937],
)
    # 1.0
    N = 10_000
    M = length(b)
    K = length(a)
    x = zeros(Float64,N)
    x[1] = 1
    y = zeros(Float64,N)

    for n in 1:N
        for m in 1:M
            if n-m+1 > 0 && n-m+1 <= N
                y[n]+=b[m]*x[n-m+1]
            end
        end
        for k in 2:K
            if n-k+1 > 0 && n-k+1 <=N
                y[n]-=a[k]*y[n-k+1]
            end
        end
    end

    e1 = sum(y[1:Int(N/2)].^2)
    e2 = sum(y[Int(N/2):N].^2)

    out = round(e2/e1)

    if out > 1
        return -1
    elseif out == 1
        return 0
    else
        return 1
    end
end

rozwiazanie()

##
using Plots

function rozwiazanie(;
    b::Vector{Float64} = [8.913266875756543e-6, 0.0, -5.347960125453926e-5, 0.0, 0.00013369900313634815, 0.0, -0.00017826533751513085, 0.0, 0.00013369900313634815, 0.0, -5.347960125453926e-5, 0.0, 8.913266875756543e-6],
    a::Vector{Float64} = [1.0, -8.629548495724551, 38.454584250373784, -112.40337766238109, 236.6238535963726, -374.82824689589495, 456.5410728161559, -430.24552263905775, 311.66579702506715, -169.66939748978297, 66.24871116898596, -16.797700842273123, 2.138855044362042],
)
    # -1.0
    N = 1000
    M = length(b)
    K = length(a)
    x = zeros(Float64,N)
    x[1] = 1
    y = zeros(Float64,N)

    for n in 1:N
        for m in 1:M
            if n-m+1 > 0 && n-m+1 <= N
                y[n]+=b[m]*x[n-m+1]
            end
        end
        for k in 2:K
            if n-k+1 > 0 && n-k+1 <=N
                y[n]-=a[k]*y[n-k+1]
            end
        end
    end
    

    e1 = sum(y[1:Int(N/2)].^2)
    e2 = sum(y[Int(N/2):N].^2)

    s = round(e2/e1)

    if s > 1
        return -1
    elseif s == 1
        return 0
    else 
        return 1
    end
end

rozwiazanie()

##

         
function rozwiazanie(;
    b::Vector{Float64} = [0.018541422056814354, -0.0010055995643370118, 0.02702638399368608, -0.0010055995643370118, 0.018541422056814354],
    a::Vector{Float64} = [1.0, -3.2559885808538533, 4.601717405766534, -3.2559885808538533, 1.0],
)
    # 0.0
    N = 1000
    x = zeros(Float64,N)
    x[1]=1
    y = zeros(Float64,N)

    for n in 1:N
        for m in 1:length(b)
            if n-m+1>0 && n-m+1<=N
                y[n]+=b[m]*x[n-m+1]
            end
        end
        for k in 2:length(a)
            if n-k+1>0 && n-k+1<=N
                y[n]-=a[k]*y[n-k+1]
            end
        end
    end

    e1 = sum(y[1:Int(N/2)].^2)
    e2 = sum(y[Int(N/2):N].^2)

    s = round(e2/e1)

    if s > 1
        return -1
    elseif s == 1
        return 0 
    else 
        return 1
    end
end

rozwiazanie()

##

          
function rozwiazanie(;
    z::Vector{ComplexF64} = ComplexF64[1.0 + 0.0im, 1.0 + 0.0im, 1.0 + 0.0im, 1.0 + 0.0im, 1.0 + 0.0im, 1.0 + 0.0im, -1.0 + 0.0im, -1.0 + 0.0im, -1.0 + 0.0im, -1.0 + 0.0im, -1.0 + 0.0im, -1.0 + 0.0im],
    p::Vector{ComplexF64} = ComplexF64[0.7098141594681513 - 0.6893006233155895im, 0.3787045857975763 + 0.9103897819152458im, 0.7098141594681513 + 0.6893006233155895im, 0.3787045857975763 - 0.9103897819152458im, 0.66352020380519 - 0.7070611543983095im, 0.4224975121179158 + 0.8650586470247913im, 0.66352020380519 + 0.7070611543983095im, 0.4224975121179158 - 0.8650586470247913im, 0.5902574139060511 - 0.7506862232447786im, 0.5020985525535611 + 0.8081401403000344im, 0.5902574139060511 + 0.7506862232447786im, 0.5020985525535611 - 0.8081401403000344im],
    k::Float64 = 3.7622629652202453e-6,
)
    # 1.0

    for pole in p
        if abs(pole) > 1
            return -1
        elseif abs(pole) == 1
            return 0
        end
    end

    return 1
end

rozwiazanie()

        
        

        

        

        