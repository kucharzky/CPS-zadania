## dany sygnal wejsciowy i odpowiedz impulsowa, podaj wartosc skuteczna sygnalu wyjsciowego

function rozwiazanie(;
    x::Vector{Float64} = [2.28, 2.69, 1.28, -0.29, 4.65, -3.89, -4.74, -1.47, -3.25, -1.9, -2.74, -0.2, 0.24, 4.77, 3.5, -4.63, -3.34, -3.4, -2.67, -2.58, -0.66, -3.74, -0.9, 4.46, 0.51, 1.28, 0.23, -0.87, 0.48, 2.58, -0.07, 4.61, -3.54, -1.51, 1.6, 2.35, -4.25, -1.43, -3.53, 4.81, 3.97, -4.08, -3.55, -4.12, -4.98, 1.84, 1.29, 3.4, -1.08, -2.81, -3.33, 0.1, -2.79, 0.98, -2.5, -3.68, -1.95, -0.93, 3.3, 0.99, -0.59, 4.54],
    h::Vector{Float64} = [4.07, -1.66, -1.06, 3.0, 2.17, 4.23, -0.32, -3.56, -4.19, -1.83, -3.93, -4.93, -0.65, 4.24, -1.55, 4.23, 1.41, -3.42, 4.25, -3.79, -2.32, -4.03],
)
    # 41.47594850932517
    function conv(x,h)
        N = length(x)
        M = length(h)
        K = N+M-1
        y = zeros(Float64,K)
        for n in 1:K
            for m in 1:N
                if n-m+1 > 0 && n-m+1 <=M
                    y[n]+=x[m]*h[n-m+1]
                end
            end
        end
        return y
    end

    y = conv(x,h)

    return sqrt(sum(y.^2)/length(y))
end

rozwiazanie()

## dany sygnal wejsciowy i odpowiedz impulsowa, poda moc sygnalu wyjsciowego
  
function rozwiazanie(;
    x::Vector{Float64} = [-0.72, -2.07, -2.35, 2.62, -3.38, 4.11, 1.25, 2.05, 4.29, 0.47, -0.25, -0.16, 2.07, 4.09, 3.27, 4.7, -3.72, -0.27, -3.26, 3.74, -3.76, -3.95, -4.55, -1.66, -3.5, -4.1, 0.0, -2.05, 4.4, 4.72, 0.79, -0.78, -2.06, 3.14, 2.85, -0.53, -1.53, 2.48, -1.87, 4.4, 3.72, 2.93, 2.88, -1.37, 0.37, -1.92, 0.95, -2.68, 4.37, 1.56, 2.28, -4.01, 1.2, 3.98, 1.54, -2.69, -2.35, 3.74, -3.13, -2.11, 2.25, 4.81, 0.57, -5.0, 1.48, 3.67, -4.27],
    h::Vector{Float64} = [1.99, 1.69, -0.95, 3.06, 1.23, -3.25, 3.73, -1.68, -1.99, -1.4, -3.29, -0.02, 1.2, 4.03, -4.79, 0.38, -3.61, 3.55, -3.54, -3.26],
)
    # 1069.2268470539536
    function conv(x,h)
        N = length(x)
        M = length(h)
        K = N+M-1
        y = zeros(Float64,K)

        for n in 1:K
            for m in 1:M
                if n-m+1 > 0 && n-m+1 <=N
                    y[n]+=h[m]*x[n-m+1]
                end
            end
        end
        return y
    end
    y = conv(x,h)
    return sum(y.^2)/length(y)
end

rozwiazanie()

## srednia sygnalu wyjsciowego
          
function rozwiazanie(;
    x::Vector{Float64} = [0.55, 0.72, 2.19, 0.88, -0.46, -4.36, 1.24, 1.69, -4.75, 0.83, 0.72, -4.91, 2.24, -2.28, -1.88, -4.26, 2.12, 1.64, 3.87, 3.07, -0.4, -0.25, 1.35, 2.04, 3.91, -4.29, 0.83, 3.65, -1.84, 1.12, 0.01, 3.03, -1.43, 2.38, 2.37, 0.12, -0.19, 3.16, 4.35, 4.46, -3.89, -2.97, -1.24, -3.06, 4.47, 3.62, 4.28, -2.02, 4.91, 3.8, -1.24, -0.35, 2.19, 4.4, -2.7, 1.9, -0.44, 4.3, 3.11, -1.76, -2.59],
    h::Vector{Float64} = [-2.61, -3.87, -1.07, -4.17, 1.21, 3.97, -1.77, 4.76, 1.3, -0.23, 0.56, 1.32, 3.66, 0.33, 0.11, 4.43, -1.43],
)
    # 3.2044155844155844
    function conv(x,h)
        N = length(x)
        M = length(h)
        K = N+M-1
        y = zeros(Float64,K)

        for n in 1:K
            for m in 1:M
                if n-m+1 > 0 && n-m+1 <= N
                    y[n]+=h[m]*x[n-m+1]
                end
            end
        end
        return y
    end

    y = conv(x,h)
    return sum(y)/length(y)
end

rozwiazanie()

## moc
          
function rozwiazanie(;
    x::Vector{Float64} = [3.71, 4.05, -3.16, -0.31, -4.45, 4.7, 0.18, 4.86, -1.12, -0.21, 1.67, 3.23, -3.52, 3.59, -2.49, -2.63, -1.63, -2.18, -3.38, -3.9, -3.01, -2.71, 0.68, -4.1, 1.91, -4.69, 3.19, -4.44, 0.73, -0.04, 1.99, -1.35, -4.07, -1.68, 3.94, 1.03, -2.4, 0.38, 0.2, 3.35, 1.93, 1.16, 0.71, -4.24, 3.22, 2.21, 1.59, 2.95, 4.39, 3.52, 1.72, 1.66, 2.36, 1.7, 0.87, -1.25],
    h::Vector{Float64} = [-3.16, -4.09, 4.75, 3.93, -4.36, 2.44, -3.19, -4.64, -2.85, -1.11, -2.72, -0.24, 4.82, 3.27, -2.02, 2.0, 1.1, -3.27, -1.55, -4.7, -4.15, 3.38, -0.69],
)
    # 995.771158474872
    function conv(x,h)
        N = length(x)
        M = length(h)
        K = N+M-1
        y = zeros(Float64,K)
        for n in 1:K
            for m in 1:M
                if n-m+1>0 && n-m+1<=N
                    y[n]+=h[m]*x[n-m+1]
                end
            end
        end
        return y        
    end

    y = conv(x,h)
    return sum(y.^2)/length(y)
end

rozwiazanie()

## wartosc skuteczna
          
function rozwiazanie(;
    x::Vector{Float64} = [-2.38, -2.6, -1.09, -4.05, 3.64, 2.52, -4.2, 0.04, 0.87, 4.05, 0.28, -2.72, 4.22, -1.84, -3.72, 4.92, -4.48, 0.1, -4.16, 4.32, -2.24, -2.55, 1.68, 3.25, -4.15, 1.95, -2.34, -1.5, 2.7, -4.6, -2.16, 0.29, 1.44, 1.46, 0.8, -3.49, -4.88, 3.99, 3.0, 1.76, 0.2, -2.47, -1.85, -4.35, 3.33, 0.83, 2.89, 1.67, 4.11, -1.13, -0.45, -3.36, -0.42, 3.9, 1.56, 2.96, -1.35, 3.14, -2.86, -2.81],
    h::Vector{Float64} = [3.48, 4.39, 1.38, 3.7, 1.93, -0.25, 0.98, -2.06, -4.83, 1.98, -4.56, 2.54, 0.16, 0.46, -2.12, 4.13, 0.81],
)
    # 26.496116827590335
    function conv(x,h)
        N = length(x)
        M = length(h)
        K = N+M-1
        y = zeros(Float64,K)
        for k in 1:K
            for m in 1:M
                if k-m+1 > 0 && k-m+1<=N
                    y[k]+=h[m]*x[k-m+1]
                end
            end
        end
        return y        
    end

    y = conv(x,h)
    return sqrt(sum(y.^2)/length(y))
end

rozwiazanie()

## srednia sygnalu

          
function rozwiazanie(;
    x::Vector{Float64} = [-3.98, -2.48, 2.52, -0.46, -4.9, 1.6, 4.03, -3.26, 4.19, 0.01, 2.02, -2.9, -2.3, -1.92, 0.04, 0.22, -0.25, 0.6, -0.83, 0.52, -0.13, 1.93, -3.87, -1.05, 4.49, -4.26, 4.79, -0.1, 1.14, 4.27, 4.05, -2.01, 4.33, -0.12, -2.83, 0.54, -2.54, -2.6, 4.07, 3.4, 1.0, -1.9, 3.55, -4.49, 4.83, 0.12, 0.49, 3.84, 3.5, -2.56, -0.9, 4.8, -3.78, -1.48, 4.36, -2.5, -0.08, -0.73, 4.84, -1.98, -2.42, 3.07, 0.83, 4.35, 4.42, -0.86, 4.66, -3.75],
    h::Vector{Float64} = [4.78, 0.86, -1.69, -4.34, -3.18, -1.31, -0.34, -4.52, -0.67, 0.8, 4.21, 0.9, -1.92, 2.58, 4.47, 4.4, -1.79, 2.33, 0.0, 0.59, -3.57, -0.95, -0.01, -0.3],
)
    # 0.3975384615384622
    function conv(x,h)
        N = length(x)
        M = length(h)
        K = N+M-1
        y = zeros(Float64,K)
        for n in 1:K
            for m in 1:M
                if n-m+1 > 0 && n-m+1 <= N
                    y[n]+=h[m]*x[n-m+1]
                end
            end
        end
        return y        
    end

    y = conv(x,h)

    return sum(y)/length(y)
end

rozwiazanie()

## energia sygnalu

          
function rozwiazanie(;
    x::Vector{Float64} = [2.26, -1.13, 2.3, -4.66, 3.48, -0.08, -0.73, 1.18, -3.5, -1.39, 0.33, -3.74, 0.78, -2.04, 3.6, -1.69, 3.65, 1.02, 4.11, 3.77, 1.29, -2.63, 1.22, -0.41, -2.69, -4.77, -0.38, 0.64, 4.12, 0.54, -0.6, 1.87, -4.83, -2.28, 4.78, 4.78, -2.12, 1.3, 3.79, 4.68, 3.77, 4.35, -1.73, -1.46, 0.47, 4.32, 4.1, 2.14, 4.94, -2.24, -2.55, -4.63, -0.31],
    h::Vector{Float64} = [1.29, 3.75, 2.69, -3.22, 4.74, 1.63, -0.38, -4.44, -3.64, 4.67, 0.47, -3.49, 2.74, -0.51, -3.53, -3.5, -1.65, -3.83, 2.94, 0.15, 1.86],
)
    # 87716.09931740002
    function conv(x,h)
        N = length(x)
        M = length(h)
        K = N+M-1
        y = zeros(Float64,K)
        for n in 1:K
            for m in 1:M
                if n-m+1 > 0 && n-m+1 <= N
                    y[n]+=h[m]*x[n-m+1]
                end
            end
        end
        return y        
    end

    y = conv(x,h)
    return sum(y.^2)
end

rozwiazanie()

        
        

        

        

        

        

        