## podaj energie bledu kwantyzacji

function rozwiazanie(;
    a::Float64 = -2.6,
    b::Float64 = 3.9,
    x::Vector{Float64} = [2.68, 2.5807, 2.4814, 2.38211, 2.28281, 2.18351, 2.08421, 1.98491, 1.88562, 1.78632, 1.68702, 1.58772, 1.48843, 1.38913, 1.28983, 1.19053, 1.09123, 0.99194, 0.89264, 0.79334, 0.69404, 0.59474, 0.49545, 0.39615, 0.29685, 0.19755, 0.09825, -0.00104, -0.10034, -0.19964, -0.29894, -0.39823, -0.49753, -0.59683, -0.69613, -0.79543, -0.89472, -0.99402, -1.09332, -1.19262, -1.29192, -1.39121, -1.49051, -1.58981, -1.68911, -1.78841, -1.8877, -1.987, -2.0863, -2.1856, -2.28489, -2.38419, -2.48349, -2.58279, 3.91791, 3.81862, 3.71932, 3.62002, 3.52072, 3.42142, 3.32213, 3.22283, 3.12353, 3.02423, 2.92493, 2.82564, 2.72634, 2.62704, 2.52774, 2.42845, 2.32915, 2.22985, 2.13055, 2.03125, 1.93196, 1.83266, 1.73336, 1.63406, 1.53476, 1.43547, 1.33617, 1.23687, 1.13757, 1.03827, 0.93898, 0.83968, 0.74038],
)
    # 0.018798519861175575
    N = 7
    L = range(start = a, stop = b, length = 2^N)
    quantize(L) = x->L[argmin(abs.(x .- L))]
    q = quantize(L)
    x_q = q.(x)
    e = x - x_q
    return sum(e.^2)
end

rozwiazanie()

## energia sygnalu bledu kwantyzacji

function rozwiazanie(;
    a::Float64 = -2.1,
    b::Float64 = -1.1,
    x::Vector{Float64} = [-1.92334, -1.90022, -1.88142, -1.86676, -1.8424, -1.8285, -1.80795, -1.78774, -1.77309, -1.74985, -1.73428, -1.71528, -1.69417, -1.67953, -1.65709, -1.64027, -1.62247, -1.60064, -1.586, -1.56427, -1.54631, -1.52965, -1.50711, -1.49247, -1.47147, -1.45228, -1.43691, -1.41353, -1.39889, -1.37884, -1.35801, -1.34441, -1.31984, -1.30518, -1.28667, -1.26299, -1.25271, -1.22571, -1.21099, -1.19642, -1.1643, -1.16606, -1.12721, -1.11185, -1.79308, -2.11305, -2.04916, -2.04382, -2.02895, -1.99839, -1.99237, -1.9654, -1.94853, -1.93385, -1.90817, -1.89613, -1.87393, -1.85463, -1.83998, -1.816, -1.80154, -1.78149, -1.761, -1.74635, -1.72336, -1.70741, -1.68877, -1.66745, -1.6528, -1.63057],
)
    # 0.026075117177777732
    N = 4
    L = range(start=a,stop=b,length=2^N)
    quantize(L) = x -> L[argmin(abs.(x .- L))]

    q = quantize(L)
    x_q = q.(x)
    e = x - x_q
    return sum(e.^2)
end

rozwiazanie()

## moc sygnalu bledu

          
function rozwiazanie(;
    a::Float64 = -0.72,
    b::Float64 = 2.3,
    x::Vector{Float64} = [1.42995, 1.66884, 1.88796, 0.25101, -0.45149, -0.25423, -0.03042, 0.20608, 0.43809, 0.65818, 0.87452, 1.10003, 1.33623, 1.56935, 1.78156, 1.93839, -0.54921, -0.35747, -0.12634, 0.11258, 0.34174, 0.55924, 0.77706, 1.00579, 1.24161, 1.46962, 1.67971, 1.87546, -0.67867, -0.46333, -0.22099, 0.01922, 0.24461, 0.4602, 0.68029, 0.91172, 1.14613, 1.36979, 1.58023, 1.79267, 2.05111, -0.57581, -0.3139, -0.07416, 0.14666, 0.36122, 0.58423, 0.81764, 1.04984, 1.27004, 1.48231, 1.70469, 1.96346, -0.71977, -0.40407, -0.16771, 0.04785, 0.26249, 0.48885, 0.72339, 0.9528, 1.1705, 1.38557, 1.61441, 1.86634, 2.27273, -0.48844, -0.26162, -0.05184, 0.16419, 0.3941, 0.62881, 0.8551, 1.07133, 1.28973, 1.52272, 1.76791, 2.00803, -0.55204, -0.3561, -0.15249, 0.06649, 0.29988, 0.53375, 0.75685, 0.97263, 1.19461, 1.42995, 1.66884, 1.88796, 0.25101, -0.45149, -0.25423, -0.03042, 0.20608, 0.43809, 0.65818],
)
    # 0.015016568291079316
    quantize(L) = x -> L[argmin(abs.(x .- L))]
    N = 3
    L = range(start = a, stop = b, length = 2^N)
    q = quantize(L)
    x_q = q.(x)
    e = x - x_q

    return sum(e.^2)/length(e)
end

rozwiazanie()


##

          
function rozwiazanie(;
    a::Float64 = 0.6,
    b::Float64 = 1.0,
    x::Vector{Float64} = [0.83893, 0.85057, 0.85785, 0.86955, 0.87681, 0.88849, 0.8958, 0.90738, 0.91485, 0.92621, 0.93399, 0.94492, 0.95328, 0.9634, 0.97299, 0.98102, 0.99498, 0.66845, 0.60316, 0.62446, 0.62627, 0.6418, 0.64613, 0.66015, 0.66555, 0.67874, 0.68482, 0.69741, 0.70405, 0.71611, 0.72325, 0.73484, 0.74244, 0.75356, 0.76162, 0.77229, 0.78081, 0.79102, 0.8, 0.80974, 0.8192, 0.82845, 0.83841, 0.84715, 0.85763, 0.86584, 0.87687, 0.8845, 0.89614, 0.90311, 0.91547, 0.92166, 0.9349, 0.94004, 0.95458, 0.95802, 0.975, 0.97438, 1.00056, 0.89116, 0.60051, 0.62182, 0.6257, 0.63828, 0.64604, 0.65634, 0.66564, 0.67482, 0.68497, 0.69348, 0.70417, 0.71223, 0.72329, 0.73106, 0.74236, 0.74993],
)
    # 0.0038170501692580423
   
    quantize(L) = x -> L[argmin(abs.(x.-L))]
    N = 5
    L = range(start=a,stop=b,length=2^N)
    q = quantize(L)

    x_q = q.(x)    
    e = x - x_q

    return sqrt(sum(e.^2)/length(e))
end

rozwiazanie()

## energie bledu
 
function rozwiazanie(;
    a::Float64 = -4.2,
    b::Float64 = 0.82,
    x::Vector{Float64} = [0.5101, -4.15363, -3.75068, -3.42299, -3.14932, -2.9218, -2.68892, -2.42354, -2.15005, -1.90013, -1.66572, -1.41494, -1.14281, -0.87973, -0.64392, -0.40895, -0.13931, 0.15074, 0.39781, 0.52886, -3.7688, -3.70994, -3.44654, -3.1493, -2.88436, -2.65375, -2.41553, -2.14871, -1.87785, -1.63071, -1.39591, -1.1421, -0.86814, -0.60733, -0.37616, -0.14204, 0.13655, 0.44465, 0.69669, -3.69084, -3.61552, -3.42355, -3.16227, -2.87642, -2.61707, -2.38478, -2.14248, -1.87427, -1.60567, -1.36128, -1.12619, -0.86914, -0.59286, -0.33468, -0.11019, 0.12137, 0.41719, 0.8213, -3.88296, -3.57136, -3.36307, -3.14627],
)
    # 2.8392280285755107
    N = 3
    quantize(L) = x -> L[argmin(abs.(x .- L))]
    L = range(start = a, stop = b, length = 2^N)
    q = quantize(L)

    x_q = q.(x)
    e = x - x_q

    return sum(e.^2)
end

rozwiazanie()

## wartosc skuteczna bledu
          
function rozwiazanie(;
    a::Float64 = -0.48,
    b::Float64 = 3.9,
    x::Vector{Float64} = [3.46, 3.59487, 3.72973, 3.8646, 3.80054, 3.66567, 3.5308, 3.39594, 3.26107, 3.12621, 2.99134, 2.85648, 2.72161, 2.58674, 2.45188, 2.31701, 2.18215, 2.04728, 1.91241, 1.77755, 1.64268, 1.50782, 1.37295, 1.23808, 1.10322, 0.96835, 0.83349, 0.69862, 0.56375, 0.42889, 0.29402, 0.15916, 0.02429, -0.11057, -0.24544, -0.38031, -0.48483, -0.34996, -0.2151, -0.08023, 0.05464, 0.1895, 0.32437, 0.45923, 0.5941, 0.72897, 0.86383, 0.9987, 1.13356, 1.26843, 1.4033, 1.53816, 1.67303, 1.80789, 1.94276, 2.07762, 2.21249, 2.34736, 2.48222, 2.61709, 2.75195, 2.88682, 3.02169, 3.15655, 3.29142, 3.42628, 3.56115, 3.69602, 3.83088, 3.83425, 3.69939, 3.56452, 3.42966, 3.29479, 3.15992, 3.02506, 2.89019, 2.75533, 2.62046, 2.48559, 2.35073, 2.21586, 2.081, 1.94613, 1.81126, 1.6764, 1.54153],
)
    # 0.005041508562216826
    quantize(L) = x->L[argmin(abs.(x.-L))]
    N = 8
    L = range(start=a,stop=b,length=2^N)
    q = quantize(L)
    x_q = q.(x)
    e = x-x_q
    return sqrt(sum(e.^2)/length(e))
end

rozwiazanie()

## 6 bitow, moc bledu

function rozwiazanie(;
    a::Float64 = 0.01,
    b::Float64 = 0.98,
    x::Vector{Float64} = [0.36768, 0.81778, 0.93592, 0.06151, 0.68707, 0.38399, 0.79305, 0.62224, 0.54405, 0.89857, 0.86727, 0.94443, 0.39067, 0.70348, 0.25328, 0.977, 0.93337, 0.8574, 0.27486, 0.25129, 0.6623, 0.62099, 0.63576, 0.83541, 0.94714, 0.84528, 0.95999, 0.28113, 0.72392, 0.46702, 0.37638, 0.82592, 0.01002, 0.43889, 0.20058, 0.26358, 0.3402, 0.89097, 0.58085, 0.8006, 0.87733, 0.58689, 0.26762, 0.49146, 0.4648, 0.12732, 0.19162, 0.15845, 0.71655, 0.11421, 0.76082, 0.14734, 0.37371, 0.60065, 0.90358, 0.02115, 0.32531, 0.23136, 0.16078, 0.94533, 0.59122, 0.1078, 0.39937, 0.81895, 0.17939, 0.03768, 0.2651, 0.59941, 0.22425, 0.69329, 0.7074, 0.58813, 0.61787, 0.01368, 0.24188, 0.38695, 0.30326],
)
    # 2.1067339926312044e-5
    quantize(L) = x -> L[argmin(abs.(x.-L))]
    N = 6
    L = range(start = a, stop = b, length = 2^N)
    q = quantize(L)
    x_q = q.(x)
    e = x - x_q
    return sum(e.^2)/length(e)
end

rozwiazanie()

        